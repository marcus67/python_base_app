#    Copyright (C) 2019-2024  Marcus Rickert
#
#    See https://github.com/marcus67/python_base_app
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

##################################################################################
# Please, beware that this file has been generated! Do not make any changes here #
# but only to python_base_app/templates/gitlab-ci.template.yml!                  #
##################################################################################

variables:
  PIP3: "./bin/pip3.sh"

stages:
  - build
  - install_and_check
  - analyze
  - owasp_check
  - owasp_upload
  - publish
  
build_pypi:
  image: marcusrickert/docker-python-app:3.11
  stage: build
  script:
    - PYTHONPATH=contrib/python_base_app python3 ci_toolbox.py --execute-stage BUILD --use-dev-dir=.
  after_script:
    - PYTHONPATH=contrib/python_base_app python3 ci_toolbox.py --execute-stage TEARDOWN
  artifacts:
      when: always
      paths:
        - ./dist/python_base_app-0.3.0.tar.gz
  variables:
    # Suppress automatic checkout for all sub modules
    GIT_SUBMODULE_STRATEGY: recursive


install_pypi_3_10:
  image: "marcusrickert/docker-python-app:3.10"
  stage: install_and_check
  script:
    - PYTHONPATH=contrib/python_base_app python3 ci_toolbox.py --execute-stage INSTALL-PYPI-PACKAGE --use-dev-dir=.
    - DELTA_PORT=3 PYTHONPATH=contrib/python_base_app python3 ci_toolbox.py --execute-stage TEST
  after_script:
    - PYTHONPATH=contrib/python_base_app python3 ci_toolbox.py --execute-stage TEARDOWN
  
  variables:
    # Suppress automatic checkout for all sub modules
    GIT_SUBMODULE_STRATEGY: recursive

install_pypi_3_11:
  image: "marcusrickert/docker-python-app:3.11"
  stage: install_and_check
  script:
    - PYTHONPATH=contrib/python_base_app python3 ci_toolbox.py --execute-stage INSTALL-PYPI-PACKAGE --use-dev-dir=.
    - DELTA_PORT=4 PYTHONPATH=contrib/python_base_app python3 ci_toolbox.py --execute-stage TEST
  after_script:
    - PYTHONPATH=contrib/python_base_app python3 ci_toolbox.py --execute-stage TEARDOWN
  
  variables:
    # Suppress automatic checkout for all sub modules
    GIT_SUBMODULE_STRATEGY: recursive

install_pypi_3_12:
  image: "marcusrickert/docker-python-app:3.12"
  stage: install_and_check
  script:
    - PYTHONPATH=contrib/python_base_app python3 ci_toolbox.py --execute-stage INSTALL-PYPI-PACKAGE --use-dev-dir=.
    - DELTA_PORT=5 PYTHONPATH=contrib/python_base_app python3 ci_toolbox.py --execute-stage TEST
  after_script:
    - PYTHONPATH=contrib/python_base_app python3 ci_toolbox.py --execute-stage TEARDOWN
  
  artifacts:
      when: always
      paths:
        - htmlcov
        - coverage.xml
  
  variables:
    # Suppress automatic checkout for all sub modules
    GIT_SUBMODULE_STRATEGY: recursive

analyze:
  image: marcusrickert/docker-python-app:3.11
  stage: analyze
  script:
    - PYTHONPATH=contrib/python_base_app python3 ci_toolbox.py --execute-stage ANALYZE --use-dev-dir=.
  after_script:
    - PYTHONPATH=contrib/python_base_app python3 ci_toolbox.py --execute-stage TEARDOWN
  variables:
    # Suppress automatic checkout for all sub modules
    GIT_SUBMODULE_STRATEGY: recursive



owasp_check:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/docker-dependency-check:latest
    entrypoint: [""]
  stage: owasp_check
  script:
    # Job will scan the project root folder and fail if any vulnerabilities with CVSS > 0 are found
    - /usr/share/dependency-check/bin/dependency-check.sh --enableExperimental --scan "./" --format JSON --project "$CI_PROJECT_NAME"
    # Dependency Check will only fail the job based on CVSS scores, and in some cases vulnerabilities do not
    # have CVSS scores (e.g. those from NPM audit), so they don't cause failure.  To fail for any vulnerabilities
    # grep the resulting report for any "vulnerabilities" sections and exit if any are found (count > 0).
  allow_failure: false
  artifacts:
    when: always
    paths:
        # Save the HTML and JSON report artifacts
      - "./dependency-check-report.json"

owasp_upload:
  image:
    name: "$SECURECHECKPLUS_ADAPTER_IMAGE"
    entrypoint: ["python", "run.py"]
  stage: owasp_upload
  allow_failure: false
  variables:
    SERVER_URL: "$SECURECHECKPLUS_SERVER_URL"
    SKIP: "$SECURECHECKPLUS_SKIP"
    REPORT_FILE_NAME: dependency-check-report.json
    FILE_FORMAT: json
    TOOL_NAME: owasp
    PROJECT_ID: "python_base_app"
    PROJECT_NAME: "python_base_app"
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      variables:
        PROJECT_ID: "$SECURECHECKPLUS_PROJECT_ID"
        API_KEY: "$SECURECHECKPLUS_API_KEY"
    - if: '$CI_COMMIT_REF_NAME == "fb-angular"'
      variables:
        PROJECT_ID: "$SECURECHECKPLUS_PROJECT_ID_FB_ANGULAR"
        API_KEY: "$SECURECHECKPLUS_API_KEY_FB_ANGULAR"
  
  script:
    - echo "Analysis successful."
publish_pypi:
  image: marcusrickert/docker-python-app:3.11
  stage: publish
  script:
    - PYTHONPATH=contrib/python_base_app python3 ci_toolbox.py --execute-stage PUBLISH-PYPI-PACKAGE --use-dev-dir=.
  only:
    - release
    - master