#    Copyright (C) 2019-2022  Marcus Rickert
#
#    See https://github.com/marcus67/python_base_app
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

##################################################################################
# Please, beware that this file has been generated! Do not make any changes here #
# but only to python_base_app/templates/gitlab-ci.template.yml!                  #
##################################################################################

version: 2.0

jobs:
  {%- if var.setup.build_debian_package %}
  build:
    #working_directory: ~
    docker:
      - image: {{ var.setup.docker_image_test }}
    steps:
      - checkout

      # Check out all sub modules
      # See https://circleci.com/docs/2.0/configuration-reference/#checkout
      - run: git submodule sync
      - run: git submodule update --init

  {%- if var.setup.ci_pip_dependencies|length > 0 %}
      - run: ./bin/pip3.sh install  {%- for package in var.setup.ci_pip_dependencies %} {{package}}{% endfor %}
  {%- endif %}
      - run: PYTHONPATH={{ var.setup.contrib_dir }}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_build_package }} --use-dev-dir=.
      - run: PYTHONPATH={{ var.setup.contrib_dir }}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_install }}
  {%- if var.setup.run_test_suite %}
      - run: PYTHONPATH={{ var.setup.contrib_dir }}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_test }} --use-dev-dir .
  {%- endif %}
      - run: codecov
      - store_artifacts:
          path: htmlcov
      - store_artifacts:
          path: {{ var.setup.debian_build_dir }}/{{ var.setup.debian_package_name }}_{{ var.setup.version }}_{{ var.setup.debian_package_revision }}.deb
      - persist_to_workspace:
          root: {{ var.setup.debian_build_dir }}
          paths:
            - {{ var.setup.debian_package_name }}_{{ var.setup.version }}_{{ var.setup.debian_package_revision }}.deb
  {%- endif %}

  {%- if var.setup.build_pypi_package %}
  build_pypi:
    #working_directory: ~
    docker:
      - image: {{ var.setup.docker_image_test }}
    steps:
      - checkout

      # Check out all sub modules
      # See https://circleci.com/docs/2.0/configuration-reference/#checkout
      - run: git submodule sync
      - run: git submodule update --init

  {%- if var.setup.ci_pip_dependencies|length > 0 %}
      - run: ./bin/pip3.sh install  {%- for package in var.setup.ci_pip_dependencies %} {{package}}{% endfor %}
  {%- endif %}
      - run: PYTHONPATH={{ var.setup.contrib_dir }}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_build_package }} --use-dev-dir=.
      - store_artifacts:
          path: "dist/{{ var.setup.name }}-{{ var.setup.version }}.tar.gz"
      - persist_to_workspace:
          root: dist
          paths:
            - "{{ var.setup.name }}-{{ var.setup.version }}.tar.gz"
  {%- endif %}

  {%- if var.setup.build_pypi_package %}
  install_pypi:
    #working_directory: ~
    docker:
      - image: {{ var.setup.docker_image_test }}
    steps:
      - checkout
      - attach_workspace:
          at: "dist"

      # Check out all sub modules
      # See https://circleci.com/docs/2.0/configuration-reference/#checkout
      - run: git submodule sync
      - run: git submodule update --init

  {%- if var.setup.ci_pip_dependencies|length > 0 %}
      - run: ./bin/pip3.sh install  {%- for package in var.setup.ci_pip_dependencies %} {{package}}{% endfor %}
  {%- endif %}
      - run: PYTHONPATH={{ var.setup.contrib_dir }}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_install_pypi_package }} --use-dev-dir=.
  {%- if var.setup.run_test_suite %}
      - run: PYTHONPATH={{ var.setup.contrib_dir }}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_test }} --use-dev-dir .
  {%- endif %}
      - run: codecov
      - store_artifacts:
          path: htmlcov
  {%- endif %}

  {%- if var.setup.publish_pypi_package|length > 0 %}
  publish_pypi:
    #working_directory: ~
    docker:
      - image: {{ var.setup.docker_image_test }}
    steps:
      - checkout
      - attach_workspace:
          at: "dist"

      # Check out all sub modules
      # See https://circleci.com/docs/2.0/configuration-reference/#checkout
      - run: git submodule sync
      - run: git submodule update --init

  {%- if var.setup.ci_pip_dependencies|length > 0 %}
      - run: ./bin/pip3.sh install  {%- for package in var.setup.ci_pip_dependencies %} {{package}}{% endfor %}
  {%- endif %}
      - run: PYTHONPATH={{ var.setup.contrib_dir }}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_publish_pypi_package }} --use-dev-dir=.
  {%- endif %}

  {%- if var.setup.build_debian_package %}
  deploy:
    docker:
      - image: {{ var.setup.docker_image_test }}
    steps:
      - checkout
      - attach_workspace:
          at: {{ var.setup.debian_build_dir}}
      - run: git submodule sync
      - run: git submodule update --init
      - run: PYTHONPATH={{ var.setup.contrib_dir }}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_publish_package }}
  {%- endif %}

  {%- if var.setup.build_debian_package and var.setup.docker_contexts|length > 0 %}
  docker:
    docker:
      - image: {{ var.setup.docker_image_docker }}
    steps:
      - checkout
      - attach_workspace:
          at: {{ var.setup.debian_build_dir}}
      - run: git submodule sync
      - run: git submodule update --init
      - setup_remote_docker:
          docker_layer_caching: false
  {%- if var.setup.ci_pip_dependencies|length > 0 %}
      - run: ./bin/pip3.sh install  {%- for package in var.setup.ci_pip_dependencies %} {{package}}{% endfor %}
  {%- endif %}
      - run: PYTHONPATH={{ var.setup.contrib_dir }}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_build_docker_images }}
  {%- endif %}

workflows:
    version: 2
    build_and_deploy:
      jobs:
  {%- if var.setup.build_debian_package %}
        - build
  {%- if var.setup.publish_debian_package|length > 0 %}
        - deploy:
            requires:
              - build
            filters:
              branches:
                only:
  {%- for branch in var.setup.publish_debian_package %}
                  - {{ branch }}
  {%- endfor %}
        - docker:
            requires:
              - build
  {%- endif %}
  {%- endif %}

  {%- if var.setup.build_pypi_package %}
        - build_pypi
        - install_pypi:
            requires:
              - build_pypi
  {%- if var.setup.publish_pypi_package|length > 0 %}
        - publish_pypi:
            requires:
              - install_pypi
  {%- if var.setup.build_debian_package and var.setup.docker_contexts|length > 0 %}
              - docker
  {%- endif %}
            filters:
              branches:
                only:
  {%- for branch in var.setup.publish_pypi_package %}
                  - {{ branch }}
  {%- endfor %}
  {%- endif %}
  {%- endif %}
