#    Copyright (C) 2019-2022  Marcus Rickert
#
#    See https://github.com/marcus67/python_base_app
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

##################################################################################
# Please, beware that this file has been generated! Do not make any changes here #
# but only to python_base_app/templates/gitlab-ci.template.yml!                  #
##################################################################################

variables:
  PIP3: "./bin/pip3.sh"

stages:
  - build
  - install_and_check
  {% if var.setup.analyze -%}
  - analyze
  {% endif -%}
  {% if var.setup.owasp -%}
  - owasp_check
  - owasp_upload
  {% endif -%}
  {% if var.setup.publish_pypi_package|length > 0 -%}
  - publish
  {% endif -%}
  {% if var.setup.docker_contexts|length > 0 -%}
  - deploy
  {% endif -%}


  {%- if var.setup.build_debian_package %}
build_debian:
  image: {{ var.setup.docker_image_make_package }}
  stage: build
  script:
  {%- if var.setup.ci_pip_dependencies|length > 0 %}
    - ${PIP3} install  {%- for package in var.setup.ci_pip_dependencies %} {{package}}{% endfor %}
  {%- endif %}
    - PYTHONPATH={{ var.setup.contrib_dir }}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_build_package }} --use-dev-dir=.
  artifacts:
    paths:
      - {{ var.setup.debian_build_dir }}/*.deb
  variables:
    # Activate automatic checkout for all sub modules
    GIT_SUBMODULE_STRATEGY: recursive

test_debian:
  image: {{ var.setup.docker_image_test }}
  stage: install_and_check
  script:
  {%- if var.setup.ci_pip_dependencies|length > 0 %}
    - ${PIP3} install  {%- for package in var.setup.ci_pip_dependencies %} {{package}}{% endfor %}
  {%- endif %}
    - PYTHONPATH={{ var.setup.contrib_dir }}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_install }}
    {%- if var.setup.run_test_suite %}
    - PYTHONPATH={{ var.setup.contrib_dir }}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_test }} --use-dev-dir .
    {%- endif %}
    - codecov
  artifacts:
    paths:
      - htmlcov
      - coverage.xml
  variables:
    # Activate automatic checkout for all sub modules
    GIT_SUBMODULE_STRATEGY: recursive
{% endif %}

{%- if var.setup.build_pypi_package %}
build_pypi:
  image: {{ var.setup.docker_image_make_package }}
  stage: build
  script:
  {%- if var.setup.ci_pip_dependencies|length > 0 %}
    - ${PIP3} install  {%- for package in var.setup.ci_pip_dependencies %} {{package}}{% endfor %}
  {%- endif %}
    - PYTHONPATH={{ var.setup.contrib_dir }}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_build_package }} --use-dev-dir=.
  after_script:
    - PYTHONPATH={{ var.setup.contrib_dir}}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_teardown }}
  artifacts:
      when: always
      paths:
        - dist/{{ var.setup.name }}-{{ var.setup.version }}.tar.gz
  variables:
    # Suppress automatic checkout for all sub modules
    GIT_SUBMODULE_STRATEGY: recursive

install_pypi:
  image: {{ var.setup.docker_image_test }}
  stage: install_and_check
  script:
  {%- if var.setup.ci_pip_dependencies|length > 0 %}
    - ${PIP3} install  {%- for package in var.setup.ci_pip_dependencies %} {{package}}{% endfor %}
  {%- endif %}
    - PYTHONPATH={{ var.setup.contrib_dir }}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_install_pypi_package }} --use-dev-dir=.
  {%- if var.setup.run_test_suite %}
    - PYTHONPATH={{ var.setup.contrib_dir }}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_test }} --use-dev-dir .
  {% endif -%}
  after_script:
    - PYTHONPATH={{ var.setup.contrib_dir}}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_teardown }}
  artifacts:
      when: always
      paths:
        - htmlcov
        - coverage.xml
  variables:
    # Suppress automatic checkout for all sub modules
    GIT_SUBMODULE_STRATEGY: recursive
{% endif %}

{%- if var.setup.analyze %}
analyze:
  image: {{ var.setup.docker_image_analyze }}
  stage: analyze
  script:
  {%- if var.setup.ci_pip_dependencies|length > 0 %}
    - ${PIP3} install  {%- for package in var.setup.ci_pip_dependencies %} {{package}}{% endfor %}
  {%- endif %}
    - PYTHONPATH={{ var.setup.contrib_dir }}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_analyze }} --use-dev-dir=.
  after_script:
    - PYTHONPATH={{ var.setup.contrib_dir}}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_teardown }}
  variables:
    # Suppress automatic checkout for all sub modules
    GIT_SUBMODULE_STRATEGY: recursive
{% endif %}

{% if var.setup.owasp %}
owasp_check:
  image:
    name: {{ var.setup.docker_image_owasp }}
    entrypoint: [""]
  stage: owasp_check
  script:
    # Job will scan the project root folder and fail if any vulnerabilities with CVSS > 0 are found
    - /usr/share/dependency-check/bin/dependency-check.sh {{ var.setup.owasp_additional_params }} --scan "./" --format XML --project "$CI_PROJECT_NAME"
    # Dependency Check will only fail the job based on CVSS scores, and in some cases vulnerabilities do not
    # have CVSS scores (e.g. those from NPM audit), so they don't cause failure.  To fail for any vulnerabilities
    # grep the resulting report for any "vulnerabilities" sections and exit if any are found (count > 0).
  allow_failure: false
  artifacts:
    when: always
    paths:
        # Save the HTML and JSON report artifacts
      - "./dependency-check-report.xml"

owasp_upload:
  image:
    name: "$VULSCAN_ADAPTER_IMAGE"
    entrypoint: ["python", "run.py"]
  stage: owasp_upload
  allow_failure: false
  variables:
    VULSCAN_SERVER_URL: "$VULSCAN_URL/analyzer/api"
    REPORT_FILE_NAME: dependency-check-report.xml
    FILE_FORMAT: xml
    TOOL_NAME: owasp
    PROJECT_ID: "{{ var.setup.name }}"
    PROJECT_NAME: "{{ var.setup.name }}"
  script:
    - echo "Analysis successful."
{% endif %}

{%- if var.setup.publish_pypi_package|length > 0 %}
publish_pypi:
  image: {{ var.setup.docker_image_test }}
  stage: publish
  script:
  {%- if var.setup.ci_pip_dependencies|length > 0 %}
    - ${PIP3} install  {%- for package in var.setup.ci_pip_dependencies %} {{package}}{% endfor %}
  {%- endif %}
    - PYTHONPATH={{ var.setup.contrib_dir }}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_publish_pypi_package }} --use-dev-dir=.
{%- endif %}

{%- if var.setup.build_debian_package and var.setup.docker_contexts|length > 0 %}
docker:
  image: {{ var.setup.docker_image_docker }}
  stage: deploy
  script:
  {%- if var.setup.ci_pip_dependencies|length > 0 %}
    - ${PIP3} install  {%- for package in var.setup.ci_pip_dependencies %} {{package}}{% endfor %}
  {%- endif %}
    - PYTHONPATH={{ var.setup.contrib_dir}}/python_base_app python3 {{ var.setup.ci_toolbox_script }} --execute-stage {{ var.setup.ci_stage_build_docker_images }} --use-dev-dir=.
  variables:
    # Activate automatic checkout for all sub modules
    GIT_SUBMODULE_STRATEGY: recursive
{% endif %}
